name: Server Build, Test and Deploy in Development

on:
  push:
    branches:
      - main
      - features/**
      - dependabot/**
  pull_request:
    branches:
      - main

jobs:
  server-test-development:
    timeout-minutes: 10
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: false
          MYSQL_ROOT_PASSWORD: admin
          MYSQL_DATABASE: my_savings_db_test
        ports:
          - 3306/tcp
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Copy ENV TESTING Laravel Configuration for CI
        working-directory: ./server
        run: php -r "file_exists('.env.testing') || copy('.env.testing.example', '.env.testing');"
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "7.4"
      - name: Start mysql service
        run: sudo /etc/init.d/mysql start
      - name: Verify MySQL connection
        run: |
          mysql --version
          sudo apt-get install -y mysql-client
          mysql --host 127.0.0.1 --port ${{ job.services.mysql.ports['3306'] }} -uroot -padmin -e "SHOW DATABASES"
      - name: Install Dependencies (PHP Vendors)
        working-directory: ./server
        run: composer install
      - name: Generate key
        working-directory: ./server
        run: php artisan key:generate --env=testing
      - name: Setup Permissions
        working-directory: ./server
        run: chmod -R 777 storage
      - name: Clear Config
        working-directory: ./server
        run: php artisan config:clear --env=testing
      - name: Run Laravel API
        working-directory: ./server
        run: php artisan serve --host=0.0.0.0 --port=8080 > /dev/null 2>&1 &
      - name: Test with phpunit
        working-directory: ./server
        env:
          MYSQL_DATABASE: my_savings_db_test
          DB_USERNAME: root
          DB_PASSWORD: admin
          DB_PORT: ${{ job.services.mysql.ports[3306] }}
          APP_URL: "http://127.0.0.1:8080"
        run: vendor/bin/phpunit --coverage-text

  server-build-development:
    needs: server-test-development
    timeout-minutes: 10
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Build server containers
        working-directory: ./server
        run: docker-compose -f "docker-compose.yaml" build app
      - name: Login to GitHub Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build container image
        uses: docker/build-push-action@v2
        with:
          context: api
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/${{ env.PROJECT }}:${{ github.sha }}
            ghcr.io/${{ github.repository }}/${{ env.PROJECT }}:${{ steps.get_stage.outputs.STAGE }}

  # server-deploy-development:
  #   timeout-minutes: 10
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Login to GitHub Docker Registry
  #       uses: docker/login-action@v1
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Configure SSH
  #       run: |
  #         eval $(ssh-agent -s)
  #         mkdir -p ~/.ssh/
  #         chmod 700 ~/.ssh/
  #         echo "$SSH_PRIVATE_KEY" >> ~/.ssh/id_ed25519
  #         chmod 600 ~/.ssh/id_ed25519
  #         ssh-add ~/.ssh/id_ed25519
  #         cat >>~/.ssh/config <<END
  #         Host server
  #           HostName $SSH_HOST
  #           User $SSH_USER
  #           Port 5678
  #           IdentityFile ~/.ssh/id_ed25519
  #           StrictHostKeyChecking no
  #         END
  #       env:
  #         SSH_USER: ${{ secrets.SSH_USER }}
  #         SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  #         SSH_HOST: ${{ secrets.SSH_HOST }}
  #     - name: Test SSH command
  #       run: ssh server 'ls -a'
